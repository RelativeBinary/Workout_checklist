{"version":3,"sources":["reducers/workoutReducer.js","contexts/WorkoutContext.js","components/Navbar.js","components/WorkoutDetails.js","components/WorkoutList.js","App.js","serviceWorker.js","index.js"],"names":["workoutReducer","state","action","type","title","workout","desc","id","v4","checked","filter","foundIndex","findIndex","newState","WorkoutContext","createContext","WorkoutContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","workouts","dispatch","useEffect","setItem","stringify","Provider","value","children","Navbar","useContext","className","length","WorkoutDetails","onClick","e","preventDefault","WorkoutList","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAEaA,EAAiB,SAACC,EAAOC,GACpC,OAAQA,EAAOC,MACb,IAAK,cACH,MAAM,GAAN,mBACKF,GADL,CAEE,CACEG,MAAOF,EAAOG,QAAQD,MACtBE,KAAMJ,EAAOG,QAAQC,KACrBC,GAAIC,cACJC,SAAS,KAGf,IAAK,iBACH,OAAOR,EAAMS,QAAO,SAACL,GAAD,OAAaA,EAAQE,KAAOL,EAAOK,MACzD,IAAK,gBAEH,IAAMI,EAAaV,EAAMW,WAAU,SAACP,GAAD,OAAaA,EAAQE,KAAOL,EAAOK,MAIlEM,EAAQ,YAAOZ,GAOnB,OANAY,EAASF,GAAc,CACrBP,MAAOH,EAAMU,GAAYP,MACzBE,KAAML,EAAMU,GAAYL,KACxBC,GAAIN,EAAMU,GAAYJ,GACtBE,SAAUR,EAAMU,GAAYF,SAEvBI,EACT,QACE,OAAOZ,IC5BAa,EAAiBC,0BAmBfC,EAjBgB,SAACC,GAAW,IAAD,EACXC,qBAAWlB,EAAgB,IAAI,WAC1D,IAAMmB,EAAYC,aAAaC,QAAQ,YACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,MAHL,mBACjCK,EADiC,KACvBC,EADuB,KAUxC,OAJAC,qBAAU,WACRN,aAAaO,QAAQ,WAAYL,KAAKM,UAAUJ,MAC/C,CAACA,IAGF,kBAACV,EAAee,SAAhB,CAAyBC,MAAO,CAAEN,WAAUC,aACzCR,EAAMc,WCJEC,EAVA,WAAO,IACZR,EAAaS,qBAAWnB,GAAxBU,SACR,OACE,yBAAKU,UAAU,UACb,+CACA,iDAAuBV,EAASW,OAAhC,iCCeSC,EApBQ,SAAC,GAAiB,IAAf/B,EAAc,EAAdA,QAChBoB,EAAaQ,qBAAWnB,GAAxBW,SAKR,OACE,4BACE,0BAAMY,QANW,SAACC,GACpBA,EAAEC,iBACFd,EAAS,CAAEtB,KAAM,gBAAiBI,GAAIF,EAAQE,OAK1C,6BAAMF,EAAQD,OACd,6BAAMC,EAAQC,MACd,6BAAMD,EAAQI,QAAU,OAAS,UAEnC,yBAAK4B,QAAS,kBAAMZ,EAAS,CAAEtB,KAAM,iBAAkBI,GAAIF,EAAQE,OAAnE,YCGSiC,EAfK,WAAO,IACjBhB,EAAaS,qBAAWnB,GAAxBU,SACR,OAAOA,EAASW,OACd,yBAAKD,UAAU,gBACb,4BACGV,EAASiB,KAAI,SAACpC,GACb,OAAO,kBAAC,EAAD,CAAgBA,QAASA,EAASqC,IAAKrC,EAAQE,UAK5D,yBAAK2B,UAAU,SAAf,+BCAWS,MAXf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCGYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3dc3b85f.chunk.js","sourcesContent":["import { v4 } from 'uuid';\r\n\r\nexport const workoutReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_WORKOUT':\r\n      return [\r\n        ...state,\r\n        {\r\n          title: action.workout.title,\r\n          desc: action.workout.desc,\r\n          id: v4(),\r\n          checked: false,\r\n        },\r\n      ];\r\n    case 'REMOVE_WORKOUT':\r\n      return state.filter((workout) => workout.id !== action.id);\r\n    case 'CHECK_WORKOUT':\r\n      //find the index of the workout\r\n      const foundIndex = state.findIndex((workout) => workout.id === action.id);\r\n\r\n      //create a new workout item using that index item with checked value inversed\r\n      //insert into array replacing the original item\r\n      let newState = [...state];\r\n      newState[foundIndex] = {\r\n        title: state[foundIndex].title,\r\n        desc: state[foundIndex].desc,\r\n        id: state[foundIndex].id,\r\n        checked: !state[foundIndex].checked,\r\n      };\r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { workoutReducer } from '../reducers/workoutReducer';\r\n\r\nexport const WorkoutContext = createContext();\r\n\r\nconst WorkoutContextProvider = (props) => {\r\n  const [workouts, dispatch] = useReducer(workoutReducer, [], () => {\r\n    const localData = localStorage.getItem('workouts');\r\n    return localData ? JSON.parse(localData) : [];\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('workouts', JSON.stringify(workouts));\r\n  }, [workouts]);\r\n\r\n  return (\r\n    <WorkoutContext.Provider value={{ workouts, dispatch }}>\r\n      {props.children}\r\n    </WorkoutContext.Provider>\r\n  );\r\n};\r\n\r\nexport default WorkoutContextProvider;\r\n","import React, { useContext } from 'react';\r\nimport { WorkoutContext } from '../contexts/WorkoutContext';\r\n\r\nconst Navbar = () => {\r\n  const { workouts } = useContext(WorkoutContext);\r\n  return (\r\n    <div className='navbar'>\r\n      <h1>Workout Routine</h1>\r\n      <p>Currently you have {workouts.length} excercises in your routine</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useContext } from 'react';\r\nimport { WorkoutContext } from '../contexts/WorkoutContext';\r\n\r\nconst WorkoutDetails = ({ workout }) => {\r\n  const { dispatch } = useContext(WorkoutContext);\r\n  const handleUpdate = (e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: 'CHECK_WORKOUT', id: workout.id });\r\n  };\r\n  return (\r\n    <li>\r\n      <span onClick={handleUpdate}>\r\n        <div>{workout.title}</div>\r\n        <div>{workout.desc}</div>\r\n        <div>{workout.checked ? 'true' : 'false'}</div>\r\n      </span>\r\n      <div onClick={() => dispatch({ type: 'REMOVE_WORKOUT', id: workout.id })}>\r\n        REMOVE\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default WorkoutDetails;\r\n","import React, { useContext } from 'react';\r\nimport { WorkoutContext } from '../contexts/WorkoutContext';\r\nimport WorkoutDetails from './WorkoutDetails';\r\n\r\nconst WorkoutList = () => {\r\n  const { workouts } = useContext(WorkoutContext);\r\n  return workouts.length ? (\r\n    <div className='workout-list'>\r\n      <ul>\r\n        {workouts.map((workout) => {\r\n          return <WorkoutDetails workout={workout} key={workout.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className='empty'>No exercises in your list!</div>\r\n  );\r\n};\r\n\r\nexport default WorkoutList;\r\n","import React from 'react';\nimport WorkoutContextProvider from './contexts/WorkoutContext';\nimport Navbar from './components/Navbar';\nimport WorkoutList from './components/WorkoutList';\nfunction App() {\n  return (\n    <div className='App'>\n      <WorkoutContextProvider>\n        <Navbar />\n        <WorkoutList />\n      </WorkoutContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}